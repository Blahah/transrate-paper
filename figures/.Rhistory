tn = TN,
tp = TP,
sensitivity = TP / P,
specificity = TN / N,
precision = TP / (TP + FP),
npv = TN / (TN + FN),
fpr = FP/ N,
fdr = FP / (FP + TP),
fnr = FN / (FN + TP),
accuracy = (TP + TN) / (P + N),
f1 = 2*TP  / (2*TP + FP + FN),
mcc = mcc(FP, FN, TP, TN)
))
}
system.time(print(accuracy(rice_trinity, 0.5, 0.5)))
accuracy <- function(dt, cutoff=0.5, refcutoff=0.5) {
est = df$score >= cutoff
truth = df$refscore >= refcutoff
class <- rep(4, length(est))
class[est & truth] <- 1
class[est & !truth] <- 2
class[!est & truth] <- 3
print(head(class));
class <- factor(class)
levels(class) <- c('TP', 'FP', 'FN', 'TN')
tab <- table(class)
FN <- as.numeric(tab[['FN']])
FP <- as.numeric(tab[['FP']])
TN <- as.numeric(tab[['TN']])
TP <- as.numeric(tab[['TP']])
P <- TP + FN
N <- FP + TN
return(list(
fn = FN,
fp = FP,
tn = TN,
tp = TP,
sensitivity = TP / P,
specificity = TN / N,
precision = TP / (TP + FP),
npv = TN / (TN + FN),
fpr = FP/ N,
fdr = FP / (FP + TP),
fnr = FN / (FN + TP),
accuracy = (TP + TN) / (P + N),
f1 = 2*TP  / (2*TP + FP + FN),
mcc = mcc(FP, FN, TP, TN)
))
}
system.time(print(accuracy(rice_trinity, 0.5, 0.5)))
rep(4, 10)
accuracy <- function(dt, cutoff=0.5, refcutoff=0.5) {
est <- df$score >= cutoff
truth <-df$refscore >= refcutoff
class <- rep(4, length(est))
class[est & truth] <- 1
class[est & !truth] <- 2
class[!est & truth] <- 3
print(head(class));
class <- factor(class)
levels(class) <- c('TP', 'FP', 'FN', 'TN')
tab <- table(class)
FN <- as.numeric(tab[['FN']])
FP <- as.numeric(tab[['FP']])
TN <- as.numeric(tab[['TN']])
TP <- as.numeric(tab[['TP']])
P <- TP + FN
N <- FP + TN
return(list(
fn = FN,
fp = FP,
tn = TN,
tp = TP,
sensitivity = TP / P,
specificity = TN / N,
precision = TP / (TP + FP),
npv = TN / (TN + FN),
fpr = FP/ N,
fdr = FP / (FP + TP),
fnr = FN / (FN + TP),
accuracy = (TP + TN) / (P + N),
f1 = 2*TP  / (2*TP + FP + FN),
mcc = mcc(FP, FN, TP, TN)
))
}
system.time(print(accuracy(rice_trinity, 0.5, 0.5)))
accuracy <- function(dt, cutoff=0.5, refcutoff=0.5) {
est <- df$score >= cutoff
truth <-df$refscore >= refcutoff
clas <- rep(4, length(est))
print(head(clas))
clas[est & truth] <- 1
clas[est & !truth] <- 2
clas[!est & truth] <- 3
print(head(clas));
clas <- factor(clas)
levels(clas) <- c('TP', 'FP', 'FN', 'TN')
tab <- table(clas)
FN <- as.numeric(tab[['FN']])
FP <- as.numeric(tab[['FP']])
TN <- as.numeric(tab[['TN']])
TP <- as.numeric(tab[['TP']])
P <- TP + FN
N <- FP + TN
return(list(
fn = FN,
fp = FP,
tn = TN,
tp = TP,
sensitivity = TP / P,
specificity = TN / N,
precision = TP / (TP + FP),
npv = TN / (TN + FN),
fpr = FP/ N,
fdr = FP / (FP + TP),
fnr = FN / (FN + TP),
accuracy = (TP + TN) / (P + N),
f1 = 2*TP  / (2*TP + FP + FN),
mcc = mcc(FP, FN, TP, TN)
))
}
system.time(print(accuracy(rice_trinity, 0.5, 0.5)))
accuracy <- function(dt, cutoff=0.5, refcutoff=0.5) {
est <- dt$score >= cutoff
truth <- dt$refscore >= refcutoff
clas <- rep(4, length(est))
print(head(clas))
clas[est & truth] <- 1
clas[est & !truth] <- 2
clas[!est & truth] <- 3
print(head(clas));
clas <- factor(clas)
levels(clas) <- c('TP', 'FP', 'FN', 'TN')
tab <- table(clas)
FN <- as.numeric(tab[['FN']])
FP <- as.numeric(tab[['FP']])
TN <- as.numeric(tab[['TN']])
TP <- as.numeric(tab[['TP']])
P <- TP + FN
N <- FP + TN
return(list(
fn = FN,
fp = FP,
tn = TN,
tp = TP,
sensitivity = TP / P,
specificity = TN / N,
precision = TP / (TP + FP),
npv = TN / (TN + FN),
fpr = FP/ N,
fdr = FP / (FP + TP),
fnr = FN / (FN + TP),
accuracy = (TP + TN) / (P + N),
f1 = 2*TP  / (2*TP + FP + FN),
mcc = mcc(FP, FN, TP, TN)
))
}
system.time(print(accuracy(rice_trinity, 0.5, 0.5)))
accuracy <- function(dt, cutoff=0.5, refcutoff=0.5) {
est <- dt$score >= cutoff
truth <- dt$refscore >= refcutoff
clas <- rep(4, length(est))
clas[est & truth] <- 1
clas[est & !truth] <- 2
clas[!est & truth] <- 3
clas <- factor(clas)
levels(clas) <- c('TP', 'FP', 'FN', 'TN')
tab <- table(clas)
FN <- as.numeric(tab[['FN']])
FP <- as.numeric(tab[['FP']])
TN <- as.numeric(tab[['TN']])
TP <- as.numeric(tab[['TP']])
P <- TP + FN
N <- FP + TN
return(list(
fn = FN,
fp = FP,
tn = TN,
tp = TP,
sensitivity = TP / P,
specificity = TN / N,
precision = TP / (TP + FP),
npv = TN / (TN + FN),
fpr = FP/ N,
fdr = FP / (FP + TP),
fnr = FN / (FN + TP),
accuracy = (TP + TN) / (P + N),
f1 = 2*TP  / (2*TP + FP + FN),
mcc = mcc(FP, FN, TP, TN)
))
}
acc_sweep <- function(dt, species, assembler) {
df <- NULL
for (cutoff in seq(0.1, 0.9, 0.1)) {
for (refcutoff in seq(0.1, 0.9, 0.1)) {
acc <- accuracy(dt, cutoff, refcutoff)
print(acc)
if (is.null(df)) {
df <- data.frame(cutoff, refcutoff, acc)
} else {
df <- rbind(df, data.frame(cutoff, refcutoff, acc))
}
}
}
df$species <- species
df$assembler <- assembler
return(df)
}
rice_trinity_acc <- acc_sweep(rice_trinity, 'rice', 'trinity')
acc_sweep <- function(dt, species, assembler) {
df <- NULL
for (cutoff in seq(0.1, 0.9, 0.1)) {
for (refcutoff in seq(0.1, 0.9, 0.1)) {
acc <- accuracy(dt, cutoff, refcutoff)
if (is.null(df)) {
df <- data.frame(cutoff, refcutoff, acc)
} else {
df <- rbind(df, data.frame(cutoff, refcutoff, acc))
}
}
}
df$species <- species
df$assembler <- assembler
return(df)
}
acc_sweep <- function(dt, species, assembler) {
df <- NULL
for (cutoff in seq(0.1, 0.9, 0.1)) {
for (refcutoff in seq(0.1, 0.9, 0.1)) {
acc <- accuracy(dt, cutoff, refcutoff)
if (is.null(df)) {
df <- data.frame(cutoff, refcutoff, acc)
} else {
df <- rbind(df, data.frame(cutoff, refcutoff, acc))
}
}
}
df$species <- species
df$assembler <- assembler
return(melt(df, id=c('species', 'assembler', 'cutoff', 'refcutoff',
'fp', 'fn', 'tp', 'tn')))
}
rice_trinity_acc <- acc_sweep(rice_trinity, 'rice', 'trinity')
rice_oases_acc <- acc_sweep(rice_oases, 'rice', 'oases')
rice_soap <- acc_sweep(rice_soap, 'rice', 'soap')
rice_soap <- load_data(
'crbb_txome/rice/soap/transcripts_into_Osativa_204_transcript.1.blast',
'rice/transrate/soapdenovotrans/soapdenovotrans-Osativa_204_protein.fa_soap.result.scafSeq_contigs.csv',
'rice', 'soap')
data_dir <- '../data'
rice_soap <- load_data(
'crbb_txome/rice/soap/transcripts_into_Osativa_204_transcript.1.blast',
'rice/transrate/soapdenovotrans/soapdenovotrans-Osativa_204_protein.fa_soap.result.scafSeq_contigs.csv',
'rice', 'soap')
load_data <- function(blast, transrate, species, assem) {
library(dplyr)
dt <- fread(paste(data_dir, blast, sep="/"))
print(head(dt))
setnames(dt, cols)
setkey(dt,contig_name)
dt[, tcov:=alnlen/tlen]
dt[, qcov:=alnlen/qlen]
dt[, refscore:=id * tcov * qcov / 100]
dt <- group_by(dt, contig_name) %>% top_n(n=1, wt=refscore)
dt_ts <- fread(paste(data_dir, transrate, sep="/"))
setkey(dt_ts, contig_name)
dt <- merge(dt[, c('contig_name', 'target', 'id', 'evalue', 'bitscore',
'tcov', 'qcov', 'refscore'),
with=F],
dt_ts[,c('contig_name', 'score', 'length', 'p_good',
'p_bases_covered', 'p_seq_true',
'p_unique', 'p_not_segmented', 'eff_length',
'eff_count'),
with=F])
dt[, sp:=species]
dt[, assembler:=assem]
dt[, score:=as.numeric(score)]
dt[, bin:=round(score, 1)]
dt[, true:=refscore >= 0.5]
return(dt)
}
rice_soap <- load_data(
'crbb_txome/rice/soap/transcripts_into_Osativa_204_transcript.1.blast',
'rice/transrate/soapdenovotrans/soapdenovotrans-Osativa_204_protein.fa_soap.result.scafSeq_contigs.csv',
'rice', 'soap')
cols <- c('contig_name', 'target', 'id', 'alnlen', 'mismatches', 'gaps',
'qstart', 'qend', 'tstart', 'tend', 'evalue', 'bitscore',
'qlen', 'tlen')
rice_soap <- load_data(
'crbb_txome/rice/soap/transcripts_into_Osativa_204_transcript.1.blast',
'rice/transrate/soapdenovotrans/soapdenovotrans-Osativa_204_protein.fa_soap.result.scafSeq_contigs.csv',
'rice', 'soap')
load_data <- function(blast, transrate, species, assem) {
library(dplyr)
dt <- fread(paste(data_dir, blast, sep="/"))
setnames(dt, cols)
setkey(dt,contig_name)
dt[, tcov:=alnlen/tlen]
dt[, qcov:=alnlen/qlen]
dt[, refscore:=id * tcov * qcov / 100]
dt <- group_by(dt, contig_name) %>% top_n(n=1, wt=refscore)
dt_ts <- fread(paste(data_dir, transrate, sep="/"))
setkey(dt_ts, contig_name)
dt <- merge(dt[, c('contig_name', 'target', 'id', 'evalue', 'bitscore',
'tcov', 'qcov', 'refscore'),
with=F],
dt_ts[,c('contig_name', 'score', 'length', 'p_good',
'p_bases_covered', 'p_seq_true',
'p_unique', 'p_not_segmented', 'eff_length',
'eff_count'),
with=F])
dt[, sp:=species]
dt[, assembler:=assem]
dt[, score:=as.numeric(score)]
dt[, bin:=round(score, 1)]
dt[, true:=refscore >= 0.5]
return(dt)
}
rice_soap_acc <- acc_sweep(rice_soap, 'rice', 'soap')
rice_acc <- rbind(rice_trinity_acc, rice_oases_acc, rice_soap_acc)
plot_acc <- function(dt) {
p <- gpplot(dt, aes(x=cutoff, y=value, colour=refcutoff, group=refcutoff)) +
geom_line() +
facet_grid(variable ~ assembler)
return(p)
}
plot_acc(rice_acc)
plot_acc <- function(dt) {
p <- ggplot(dt, aes(x=cutoff, y=value, colour=refcutoff, group=refcutoff)) +
geom_line() +
facet_grid(variable ~ assembler)
return(p)
}
plot_acc(rice_acc)
rice_acc[which.max(rice_Acc$mcc),]
rice_acc[which.max(rice_acc$mcc),]
max(rice_acc$mcc)
summary(rice_acc)
rice_acc_wide <- dcast(rice_acc, formula = variable ~ value)
head(rice_acc_wide
)
rice_acc_wide <- dcast(rice_acc, formula = variable ~ .)
acc_sweep <- function(dt, species, assembler) {
df <- NULL
for (cutoff in seq(0.1, 0.9, 0.1)) {
for (refcutoff in seq(0.1, 0.9, 0.1)) {
acc <- accuracy(dt, cutoff, refcutoff)
if (is.null(df)) {
df <- data.frame(cutoff, refcutoff, acc)
} else {
df <- rbind(df, data.frame(cutoff, refcutoff, acc))
}
}
}
df$species <- species
df$assembler <- assembler
df
}
rice_trinity_acc <- acc_sweep(rice_trinity, 'rice', 'trinity')
rice_oases_acc <- acc_sweep(rice_oases, 'rice', 'oases')
rice_soap_acc <- acc_sweep(rice_soap, 'rice', 'soap')
rice_acc <- rbind(rice_trinity_acc, rice_oases_acc, rice_soap_acc)
rice_acc[which.max(rice_acc$mcc),]
rice_Acc
rice_acc
subset(rice_acc, cutoff==0.5 & refcutoff==0.5)
subset(rice_acc, cutoff==0.5 & refcutoff==0.6)
subset(rice_acc, cutoff==0.6 & refcutoff==0.5)
subset(rice_acc, cutoff==0.4 & refcutoff==0.5)
subset(rice_acc, cutoff==0.2 & refcutoff==0.2)
subset(rice_acc, cutoff==0.3 & refcutoff==0.3)
subset(rice_acc, cutoff==0.3 & refcutoff==0.3)
subset(rice_acc, cutoff==0.3 & refcutoff==0.4)
subset(rice_acc, cutoff==0.3 & refcutoff==0.2)
subset(rice_acc, cutoff==0.2 & refcutoff==0.2)
subset(rice_acc, cutoff==0.5 & refcutoff==0.5)
ggplot(subset(rice_acc, cutoff==0.5 & refcutoff==0.5))
rice_acc_l <-  return(melt(rice_acc, id=c('species', 'assembler', 'cutoff', 'refcutoff',
'fp', 'fn', 'tp', 'tn')))
rice_acc_l <- return(melt(rice_acc, id=c('species', 'assembler', 'cutoff', 'refcutoff',
'fp', 'fn', 'tp', 'tn')))
rice_acc_l <- melt(rice_acc, id=c('species', 'assembler', 'cutoff', 'refcutoff',
'fp', 'fn', 'tp', 'tn'))
ggplot(subset(rice_acc_l, cutoff==0.5 & refcutoff==0.5), aes(x=assembler, y=value)) + geom_bar() + facet_grid(variable)
ggplot(subset(rice_acc_l, cutoff==0.5 & refcutoff==0.5), aes(x=assembler, y=value)) + geom_bar() + facet_grid(variable ~ .)
ggplot(subset(rice_acc_l, cutoff==0.5 & refcutoff==0.5), aes(x=assembler, y=value)) + geom_bar(stat="identity") + facet_grid(variable ~ .)
ggplot(subset(rice_acc_l, cutoff==0.5 & refcutoff==0.5), aes(x=assembler, y=value)) + geom_bar(stat="identity") + facet_grid(variable ~ .) + ylim(0,1)
mouse_trinity_acc < -acc_sweep(mouse_trinity, 'mouse', 'trinity')
mouse_oases_acc <- acc_sweep(mouse_oases, 'mouse', 'oases')
moues_soap_acc <- acc_sweep(mouse_soap, 'mouse', 'soap')
mouse_soap_acc <- acc_sweep(mouse_soap, 'mouse', 'soap')
mouse_acc <- rbind(mouse_trinity_acc, mouse_oases_acc, mouse_soap_acc)
mouse_trinity_acc < -acc_sweep(mouse_trinity, 'mouse', 'trinity')
mouse_trinity_acc <- acc_sweep(mouse_trinity, 'mouse', 'trinity')
mouse_acc <- rbind(mouse_trinity_acc, mouse_oases_acc, mouse_soap_acc)
plot_acc(mouse_acc)
plot_acc <- function(dt) {
p <- ggplot(dt, aes(x=specificity, y=sensitivity, colour=assembler, pch=species)) +
geom_point()
return(p)
}
plot_acc(mouse_acc)
plot_acc(rbind(rice_acc, mouse_acc))
human_trinity_acc <- acc_sweep(human_trinity, 'human', 'trinity')
human_oases_acc <- bin_data(human_oases, 'human', 'oases')
human_acc <- rbind(human_trinity_acc, human_oases_acc)
human_oases_acc <- acc_wweep(human_oases, 'human', 'oases')
human_oases_acc <- acc_sweep(human_oases, 'human', 'oases')
human_acc <- rbind(human_trinity_acxc, human_oases_acc)
human_acc <- rbind(human_trinity_acc, human_oases_acc)
plot_acc(rbind(rice_acc, mouse_acc, human_acc))
yeast_trinity_acc <- acc_sweep(yeast_trinity, 'yeast', 'trinity')
(yeast_oases, 'yeast', 'oases')
yeast_oases_acc <- acc_sweep(yeast_oases, 'yeast', 'oases')
yeast_acc <- rbind(yeast_trinity_acc, yeast_oases_acc)
plot_acc(rbind(rice_acc, mouse_acc, human_acc, yeast_acc))
plot_acc(subset(rbind(rice_acc, mouse_acc, human_acc, yeast_acc), cutoff==0.5 & refcutoff==0.5))
plot_acc <- function(dt) {
p <- ggplot(dt, aes(x=specificity, y=sensitivity, colour=assembler, pch=species)) +
geom_point() + xlim(0, 1) + ylim(0, 1)
return(p)
}
plot_acc(subset(rbind(rice_acc, mouse_acc, human_acc, yeast_acc), cutoff==0.5 & refcutoff==0.5))
plot_acc <- function(dt) {
p <- ggplot(dt, aes(x=specificity, y=sensitivity, colour=assembler, pch=species)) +
geom_point(size=1) + xlim(0, 1) + ylim(0, 1)
return(p)
}
plot_acc(subset(rbind(rice_acc, mouse_acc, human_acc, yeast_acc), cutoff==0.5 & refcutoff==0.5))
plot_acc <- function(dt) {
p <- ggplot(dt, aes(x=specificity, y=sensitivity, colour=assembler, pch=species)) +
geom_point(size=10) + xlim(0, 1) + ylim(0, 1)
return(p)
}
plot_acc(subset(rbind(rice_acc, mouse_acc, human_acc, yeast_acc), cutoff==0.5 & refcutoff==0.5))
plot_acc(subset(rbind(rice_acc, mouse_acc, human_acc, yeast_acc), refcutoff==0.5))
?cor
rice_trinity_cor <- cor(rice_trinity[,c('score', 'refscore')])
rice_trinity_cor <- cor(rice_trinity$score, rice_trinity$refscore)
rice_trinity_cor
rice_trinity_cor <- cor(rice_trinity$score, rice_trinity$refscore, method="spearman", use="complete.obs")
rice_trinity_cor
do_cor <- function(df, species, assembler) {
res <- cor(df$score, df$refscore, method="spearman")
return data.frame(species, assembler, cor=res)
}
do_cor <- function(df, species, assembler) {
res <- cor(df$score, df$refscore, method="spearman")
return(data.frame(species, assembler, cor=res))
}
rice_trinity_cor <- do_cor(rice_trinity, 'rice', 'trinity')
rice_oases_cor <- do_cor(rice_oases, 'rice', 'oases')
rice_oases_cor
do_cor(mouse_soap, 'mouse', 'soap')
do_cor(rice_soap, 'rice', 'soap')
rice_soap_cor <- do_cor(rice_Soap, 'rice', 'soap')
rice_soap_cor <- do_cor(rice_soap, 'rice', 'soap')
rice_cor <- rbind(rice_trinity_cor, rice_oases_cor, rice_soap_cor)
mouse_trinity_cor <- do_cor(mouse_trinity, 'mouse', 'trinity')
mouse_trinity_cor
mouse_oases_cor <- do_cor(mouse_oases, 'mouse', 'oases')
mouse_oases_cor
mouse_soap_cor <- do_cor(mouse_soap, 'mouse', 'soap')
mouse_cor <- rbind(mouse_trinity_cor, mouse_oases_cor, mouse_soap_cor)
rbind(rice_cor, mouse_cor)
human_trinity_cor <- do_cor(human_trinity, 'human', 'trinity')
human_trinity_Cor
human_trinity_cor
human_oases_cor <- do_cor(human_oases, 'human', 'oases')
human_oases_cor
all_acc <- rbind(rice_acc, mouse_acc, human_acc, yeast_acc)
head(all_acc)
p < ggplot(subset(all_acc, refcutoff==0.5), aes(x=fpr, y=sensitivity, colour=species, linetype=assembler)) + geom_line()
summary(all_acc)
all_acc$species <- factor(all_acc$species, levels=spp)
all_acc$assembler <- factor(all_acc$assembler, levels=assem)
p < ggplot(subset(all_acc, refcutoff==0.5), aes(x=fpr, y=sensitivity, colour=factor, linetype=assembler)) + geom_line()
p <- ggplot(subset(all_acc, refcutoff==0.5), aes(x=fpr, y=sensitivity, colour=factor, linetype=assembler)) + geom_line()
p
p <- ggplot(subset(all_acc, refcutoff==0.5), aes(x=fpr, y=sensitivity, colour=species, linetype=assembler)) + geom_line()
p
p <- ggplot(subset(all_acc, refcutoff==0.5),
aes(x=fpr, y=sensitivity, colour=species, linetype=assembler)) +
geom_line() +
theme_bw()
p
tail(subset(yeast_acc, refcutoff=0.5))
dim(rice_trinity)
dim(complete_cases(rice_trinity))
dim(complete.cases(rice_trinity))
complete.cases(rice_trinity$score)
length(which(complete.cases(rice_trinity$score)))
dim(complete.cases(rice_trinity))
dim(rice_trinity)
p <- ggplot(subset(all_acc, refcutoff==0.5),
aes(x=fpr, y=sensitivity, colour=species, linetype=assembler)) +
geom_line() +
theme_bw() +
xlab('False positive rate') +
ylab('True positive rate')
p
tail(subset(yeast_acc, refcutoff=0.5))
subset(yeast_acc, refcutoff=0.5)
subset(yeast_acc, refcutoff==0.5)
p <- ggplot(subset(all_acc, refcutoff==0.5),
aes(x=fpr, y=sensitivity, colour=species, linetype=assembler)) +
geom_line() +
theme_bw() +
xlab('False positive rate') +
ylab('True positive rate') +
theme(legend.key = element_blank())
p
